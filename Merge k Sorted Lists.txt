*****Problem Statement*****
******Merge k Sorted Lists*****

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

******Code*******

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode convert(ArrayList<ListNode> arr){
        if(arr.size() < 1) return null;
        int n = arr.size()-1;
        ListNode newNode = new ListNode(arr.get(n).val, null);
        //TC: O(k*n) 
        for(int i = n - 1; i >= 0; i--){
            newNode = new ListNode(arr.get(i).val, newNode);
        }

        return newNode;
    }
    public ListNode mergeKLists(ListNode[] lists) {
        //Supose lists length is k and each linked list have length n 
        //Approach 1: TC: O(k*n) + O(k*n log k*n) + O(k*n)  SC:O(k*n)
        // ArrayList<ListNode> arr = new ArrayList<>();// SC:O(k*n)

        // //TC:O(k*n) 
        // for(int i = 0; i < lists.length; i++){//O(k)
        //     ListNode temp = lists[i];
        //    //running O(n) times
        //    while(temp != null){
        //     arr.add(temp);
        //     temp = temp.next;
        //    }
        // }

        // Collections.sort(arr,(a, b) -> a.val - b.val);//TC:O(k*n log k*n)
        // ListNode head = convert(arr);//O(k*n)

        // return head;

        //Approach 2: TC: O(mlogm) + O(mlogm) SC: O(m)

        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b) -> a.val - b.val); //SC: O(m)
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        //for loop will take O(mlogm) time
        for(ListNode list : lists){
            while(list != null){
                pq.add(list);
                list = list.next;
            }
        }

       //m = k * n  here k is the lists length and n is the linked list length 
       //overall TC of while loop is O(mlogm)
        while(!pq.isEmpty()){//o(m)
          dummy.next = pq.remove();//remove method will take O(logm) time m is the pq size
          dummy = dummy.next;
          dummy.next = null;
        }

        return head.next;
    }
}