*******Problem Statement*******
******Jump Game*******


You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

*******Code******



class Solution {

    // Approach 1: Using recursion TC: k^n SC:(n) k is the max no of steps 
    public boolean isReached(int[] nums, int idx, int n){
        if(idx == n-1){
            return true;
        }

        if(idx >= n){
            return false;
        }

        for(int i = 1; i <= nums[idx]; i++){
            if(isReached(nums, idx+i, n) == true){
                return true;
            }
        }

        return false;
    }
    public boolean canJump(int[] nums) {
        int n = nums.length;

        return isReached(nums, 0, n);
    }


    // // Approach 2: Using memoiation TC: O(n)  SC:(n)
    public boolean isReached(int[] nums, int idx, int n, int[] dp){
        if(idx == n-1){
            return true;
        }

        if(idx >= n){
            return false;
        }

        if(dp[idx] != -1){
            return dp[idx] == 1? true: false;
        }

        for(int i = 1; i <= nums[idx]; i++){
            if(isReached(nums, idx+i, n, dp) == true){
                dp[idx] = 1;
                return true;
            }
        }

        dp[idx] = 0;

        return false;
    }
    public boolean canJump(int[] nums) {
        int n = nums.length;

        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);

        return isReached(nums, 0, n, dp);
    }

    //  // Approach 3: Bottom Up TC:O(n) SC:(n)
    
    public boolean canJump(int[] nums) {
        int n = nums.length;

        int[] dp = new int[n];

        dp[0] = 1;

        for(int i = 1; i < n; i++){
            for(int j = i - 1; j >= 0; j--){
                if(dp[j] == 1 && j + nums[j] >= i){
                    dp[i] = 1;
                    break;
                }
            }
        }
        return dp[n-1] == 1? true: false;
    }

    // Approach 4: TC:O(n) SC:(1)
    
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int maxReach = 0;

        for(int i = 0; i < n; i++){
            if( i > maxReach){
                return false;
            }

            maxReach = Math.max(maxReach, i + nums[i]);
        }

        return true;
    }
}