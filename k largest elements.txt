*****Problem Statement*****

****k largest elements*****
Matrix Partners India: Exclusive Job-A-Thon | Apply to 15+ Companies via 1 Hiring Challenge | Contest LIVE right now!

banner
Given an array Arr of N positive integers and an integer K, find K largest elements from the array.  The output elements should be printed in decreasing order.

Example 1:

Input:
N = 5, K = 2
Arr[] = {12, 5, 787, 1, 23}
Output: 787 23
Explanation: 1st largest element in the
array is 787 and second largest is 23.
Example 2:

Input:
N = 7, K = 3
Arr[] = {1, 23, 12, 9, 30, 2, 50}
Output: 50 30 23
Explanation: 3 Largest element in the
array are 50, 30 and 23.
Your Task:
You don't need to read input or print anything. Your task is to complete the function kLargest() which takes the array of integers arr, n and k as parameters and returns an array of integers denoting the answer. The array should be in decreasing order.

Expected Time Complexity: O(K+(N-K)*logK)
Expected Auxiliary Space: O(K+(N-K)*logK)

Constraints:
1 ≤ K ≤ N ≤ 105
1 ≤ Arr[i] ≤ 106

***Code*****

class Solution {
    int[] kLargest(int[] arr, int n, int k) {
        // Approach 1: TC:O(nlogn)+O(k)
        if(n < 1 ) return arr;
        
        Arrays.sort(arr);
        
        int[] ans = new int[k];
        int j = 0;
    
        for(int i = k; i > 0 ; i--){
            ans[j++] = arr[n-1];
            n--;
        }
        return ans;
        
        // Approach 2: TC:O(nlogn)+O(klogk)
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        
        for(int i = 0; i < n; i++){//n time to travese arr
            pq.add(arr[i]);//logn time to push the elmnt into priority queue
        }
        int ans[] = new int[k];
      
        for(int i = 0; i < k; i++){
            ans[i] = pq.remove();//remove will take logn time
        }
        
        return ans;
    }
}